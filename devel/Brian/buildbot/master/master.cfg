# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("build1-CentOS-x64", "SET_PASSWORD_HERE", max_builds=1),
               BuildSlave("build2-Ubuntu", "SET_PASSWORD_HERE", max_builds=1),
               # BuildSlave("build3-Fedora", "SET_PASSWORD_HERE", max_builds=1),
               BuildSlave("build4-Ubuntu-x64", "SET_PASSWORD_HERE", max_builds=1),
               # BuildSlave("build5-WindowsServer2008R2", "SET_PASSWORD_HERE", max_builds=1),
               BuildSlave("build6-Debian", "SET_PASSWORD_HERE", max_builds=1),
               BuildSlave("slave7-Cygwin", "SET_PASSWORD_HERE", max_builds=1),
               BuildSlave("slave7-Windows-MinGW", "SET_PASSWORD_HERE", max_builds=1),
               BuildSlave("slave7-Windows-MSYS", "SET_PASSWORD_HERE", max_builds=1),
               BuildSlave("slave7-Windows-VS10", "SET_PASSWORD_HERE", max_builds=1),
               BuildSlave("slave7-Windows-VS10-x64", "SET_PASSWORD_HERE", max_builds=1),
              ]

c['mergeRequests'] = False

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.svnpoller import SVNPoller
from buildbot.changes.svnpoller import split_file_branches
source_code_svn_url='https://rathena.svn.sourceforge.net/svnroot/rathena/'
c['change_source'] = []
c['change_source'].append(SVNPoller(
    svnurl=source_code_svn_url,
    split_file=split_file_branches,
    pollinterval=60, # seconds
    histmax=10,
    revlinktmpl='http://sourceforge.net/apps/trac/rathena/changeset/%s/',
))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

def has_src_files(change):
    for name in change.files:
        if name.endswith(".c"):
            return True
        elif name.endswith(".h"):
            return True
        elif name == "CMakeLists.txt":
            return True
    return False

from buildbot import scheduler
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.changes.filter import ChangeFilter
compile = scheduler.AnyBranchScheduler(
    name="rathena-sql",
    treeStableTimer=2*60,
    builderNames=["CMake-CentOS_x64", "CMake-Debian", "CMake-Ubuntu", "CMake-Ubuntu_x64", "CMake-Cygwin-UnixMakefiles", 
                  "CMake-Windows-VS10", "CMake-Windows-NMake", "CMake-Windows-MinGW", "CMake-Windows-MSYS", 
                  "CentOS_x64", "Debian", "Ubuntu", "Ubuntu_x64", 
                  "Cygwin-Makefiles", "Windows-VS10"],
    fileIsImportant=has_src_files
)
compile_branch=SingleBranchScheduler(# XXX move builders to normal scheduler after branch is merged
    name="bs-coreoptimize",
    change_filter=ChangeFilter(branch='branches/bs-coreoptimize'),
    treeStableTimer=2*60,
    builderNames=["Windows-VS10-x64", "CMake-Windows-VS10-x64", "CMake-Windows-NMake-x64"])
linux_tests = scheduler.Triggerable(
    name="rathena-tests",
    builderNames=["map-server_sql"]
)
c['schedulers'] = [compile, compile_branch, linux_tests]


####### Factories

# Factories create the steps done by the builder to process a particular build.
from cmake import CMakeFactory
f_CMake_Single = CMakeFactory(# Factory for single-configuration generators (ex: Makefiles)
    baseURL = (source_code_svn_url + '%%BRANCH%%'),
    arguments=["-DCMAKE_BUILD_TYPE=RelWithDebInfo"]
    )
f_CMake_Multi = CMakeFactory(# Factory for multi-configuration generators (ex: VS10 Project Files)
    baseURL = (source_code_svn_url + '%%BRANCH%%'),
    useBuildType="RelWithDebInfo",
    )
p_CMake_UnixMakefiles={# properties for Unix Makefiles generator
    "generator": "Unix Makefiles",
    "extra_arguments": ["-DBUILD_PLUGIN_console=ON", "-DBUILD_PLUGIN_pid=ON", "-DBUILD_PLUGIN_sample=ON", "-DBUILD_PLUGIN_sig=ON"]
}



####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.steps import source, shell, trigger
from buildbot.steps.transfer import FileDownload
from buildbot.process import factory
from buildbot.process.properties import WithProperties
from buildbot.config import BuilderConfig

step_source_svn = source.SVN(
    mode='copy',
    baseURL = (source_code_svn_url + '%%BRANCH%%'),
    defaultBranch='trunk',
    retry=(30,2)
)

# Builders Linux (compile and check for errors/warnings)
f6 = factory.BuildFactory()
f6.addStep(step_source_svn)
f6.addStep(shell.Configure(command=["./configure", "--enable-buildbot=yes"], logEnviron=False))
f6.addStep(shell.Compile(command=["make", "all"], logEnviron=False))
b6 = BuilderConfig(
    name = "Debian",
    slavenames = ["build6-Debian"],
    slavebuilddir = "rathena_sql",
    factory = f6,
)
b6_CMake = BuilderConfig(
    name="CMake-Debian",
    slavenames=["build6-Debian"],
    slavebuilddir="rathena_sql-CMake",
    factory=f_CMake_Single,
    properties=p_CMake_UnixMakefiles)

f2 = factory.BuildFactory()
f2.addStep(step_source_svn)
f2.addStep(shell.Configure(command=["./configure", "--enable-buildbot=yes"], logEnviron=False))
f2.addStep(shell.Compile(command=["make", "all"], logEnviron=False))
f2.addStep(trigger.Trigger(schedulerNames=["rathena-tests"]))
b2 = BuilderConfig(
    name = "Ubuntu",
    slavenames = ["build2-Ubuntu"],
    slavebuilddir = "rathena_sql",
    factory = f2,
)
b2_CMake = BuilderConfig(
    name="CMake-Ubuntu",
    slavenames=["build2-Ubuntu"],
    slavebuilddir="rathena_sql-CMake",
    factory=f_CMake_Single,
    properties=p_CMake_UnixMakefiles)

# Builders Linux x64
f4 = factory.BuildFactory()
f4.addStep(step_source_svn)
f4.addStep(shell.Configure(command=["./configure", "--enable-buildbot=yes", "--enable-64bit"], logEnviron=False))
f4.addStep(shell.Compile(command=["make", "all"], logEnviron=False))
b1 = BuilderConfig(
    name = "CentOS_x64",
    slavenames = ["build1-CentOS-x64"],
    slavebuilddir = "rathena_sql",
    factory = f4,
)
b1_CMake = BuilderConfig(
    name="CMake-CentOS_x64",
    slavenames=["build1-CentOS-x64"],
    slavebuilddir="rathena_sql-CMake",
    factory=f_CMake_Single,
    properties=p_CMake_UnixMakefiles)
b4 = BuilderConfig(
    name = "Ubuntu_x64",
    slavenames = ["build4-Ubuntu-x64"],
    slavebuilddir = "rathena_x64_sql",
    factory = f4,
)
b4_CMake = BuilderConfig(
    name="CMake-Ubuntu_x64",
    slavenames=["build4-Ubuntu-x64"],
    slavebuilddir="rathena_sql-CMake",
    factory=f_CMake_Single,
    properties=p_CMake_UnixMakefiles)

# Builders Windows
# Windows: rAthena-10.sln / Release
f7_VS10 = factory.BuildFactory()
f7_VS10.addStep(step_source_svn)
f7_VS10.addStep(shell.Compile(
    command=["devenv.com", "rAthena-10.sln", "/build", "Release^|Win32"],
    logEnviron=False))
b7_VS10 = BuilderConfig(
    name="Windows-VS10",
    slavenames=["slave7-Windows-VS10"],
    slavebuilddir="VS10",
    factory=f7_VS10,
    env={"CL":"/DBUILDBOT"},
)

# Windows: CMake - Visual Studio 10 / RelWithDebInfo
b7_CMake_VS10 = BuilderConfig(
    name="CMake-Windows-VS10",
    slavenames=["slave7-Windows-VS10"],
    slavebuilddir="CMake-VS10",
    factory=f_CMake_Multi,
    properties={
        "generator": "Visual Studio 10",
        "extra_arguments": ["-DBUILD_PLUGIN_console=ON", "-DBUILD_PLUGIN_dbghelpplug=ON", "-DBUILD_PLUGIN_pid=ON", "-DBUILD_PLUGIN_sample=ON", "-DBUILD_PLUGIN_sig=ON"]
    },
)
# Windows: CMake - NMake Makefiles / RelWithDebInfo
b7_CMake_NMake = BuilderConfig(
    name="CMake-Windows-NMake",
    slavenames=["slave7-Windows-VS10"],
    slavebuilddir="CMake-NMake",
    factory=f_CMake_Single,
    properties={
        "generator": "NMake Makefiles",
        "extra_arguments": ["-DBUILD_PLUGIN_console=ON", "-DBUILD_PLUGIN_dbghelpplug=ON", "-DBUILD_PLUGIN_pid=ON", "-DBUILD_PLUGIN_sample=ON", "-DBUILD_PLUGIN_sig=ON"]
    },
)
# Windows: CMake - MinGW Makefiles / RelWithDebInfo
b7_CMake_MinGW = BuilderConfig(
    name="CMake-Windows-MinGW",
    slavenames=["slave7-Windows-MinGW"],
    slavebuilddir="CMake-MinGW",
    factory=f_CMake_Single,
    properties={
        "generator": "MinGW Makefiles",
        "extra_arguments": ["-DBUILD_PLUGIN_console=ON", "-DBUILD_PLUGIN_pid=ON", "-DBUILD_PLUGIN_sample=ON", "-DBUILD_PLUGIN_sig=ON"]
    },
)
# Windows: CMake - MSYS Makefiles / RelWithDebInfo
b7_CMake_MSYS = BuilderConfig(
    name="CMake-Windows-MSYS",
    slavenames=["slave7-Windows-MSYS"],
    slavebuilddir="CMake-MSYS",
    factory=f_CMake_Single,
    properties={
        "generator": "MSYS Makefiles",
        "extra_arguments": ["-DBUILD_PLUGIN_console=ON", "-DBUILD_PLUGIN_pid=ON", "-DBUILD_PLUGIN_sample=ON", "-DBUILD_PLUGIN_sig=ON"]
    },
)


# Builders Windows x64
# Windows x64: rAthena-10.sln / Release
f7_VS10_x64 = factory.BuildFactory()
f7_VS10_x64.addStep(step_source_svn)
f7_VS10_x64.addStep(shell.Compile(
    command=["devenv.com", "rAthena-10.sln", "/build", "Release^|x64"],
    logEnviron=False))
b7_VS10_x64 = BuilderConfig(
    name="Windows-VS10-x64",
    slavenames=["slave7-Windows-VS10-x64"],
    slavebuilddir="VS10-x64",
    factory=f7_VS10_x64,
    env={"CL":"/DBUILDBOT"},
)

# Windows: CMake - Visual Studio 10 / RelWithDebInfo
b7_CMake_VS10_x64 = BuilderConfig(
    name="CMake-Windows-VS10-x64",
    slavenames=["slave7-Windows-VS10-x64"],
    slavebuilddir="CMake-VS10-x64",
    factory=f_CMake_Multi,
    properties={
        "generator": "Visual Studio 10 Win64",
        "extra_arguments": ["-DBUILD_PLUGIN_console=ON", "-DBUILD_PLUGIN_pid=ON", "-DBUILD_PLUGIN_sample=ON", "-DBUILD_PLUGIN_sig=ON"]
    },
)
# Windows: CMake - NMake Makefiles / RelWithDebInfo
b7_CMake_NMake_x64 = BuilderConfig(
    name="CMake-Windows-NMake-x64",
    slavenames=["slave7-Windows-VS10-x64"],
    slavebuilddir="CMake-NMake-x64",
    factory=f_CMake_Single,
    properties={
        "generator": "NMake Makefiles",
        "extra_arguments": ["-DBUILD_PLUGIN_console=ON", "-DBUILD_PLUGIN_pid=ON", "-DBUILD_PLUGIN_sample=ON", "-DBUILD_PLUGIN_sig=ON"]
    },
)


# Builders Cygwin
# Makefiles
b7_Cygwin_Makefiles = BuilderConfig(
    name="Cygwin-Makefiles",
    slavenames=["slave7-Cygwin"],
    slavebuilddir="Makefiles",
    factory=f6, # XXX same factory actions (update+configure+make)
)
# CMake - MSYS Makefiles / RelWithDebInfo
b7_Cygwin_CMake_UnixMakefiles = BuilderConfig(
    name="CMake-Cygwin-UnixMakefiles",
    slavenames=["slave7-Cygwin"],
    slavebuilddir="CMake-UnixMakefiles",
    factory=f_CMake_Single,
    properties=p_CMake_UnixMakefiles,
)


# Tests (start map-server_sql and check for errors/warnings)
f0 = factory.BuildFactory()
f0.addStep(FileDownload(mastersrc="~/import/map_conf.txt",   slavedest="conf/import/map_conf.txt"))
f0.addStep(FileDownload(mastersrc="~/import/inter_conf.txt", slavedest="conf/import/inter_conf.txt"))
f0.addStep(shell.ShellCommand(command=["./map-server_sql", "--run-once"], 
                              logEnviron=False,
                              description=["testing"],
                              descriptionDone=["tests"]
                              ))
b0 = {'name': "map-server_sql",
      'slavenames': ["build2-Ubuntu"],
      'builddir': "map-server_sql",
      'slavebuilddir': "rathena_sql",
      'factory': f0,
      }

c['builders'] = [b0, b6,b6_CMake,b2,b2_CMake,     # Linux
                 b1,b1_CMake,b4,b4_CMake,         # Linux x64
                 # Windows
                 b7_VS10,b7_CMake_VS10,b7_CMake_NMake, b7_CMake_MinGW, b7_CMake_MSYS,
                 # Windows x64
                 b7_VS10_x64, b7_CMake_VS10_x64 ,b7_CMake_NMake_x64,
                 # Cygwin
                 b7_Cygwin_Makefiles, b7_Cygwin_CMake_UnixMakefiles
                 ]


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
c['status'].append(html.WebStatus(http_port=80))

# from buildbot.status.web import auth, authz
# authz_cfg=authz.Authz(
    # # change any of these to True to enable; see the manual for more
    # # options
    # auth=auth.BasicAuth([("pyflakes","pyflakes")]),
    # gracefulShutdown = False,
    # forceBuild = 'auth', # use this to test your slave once it is set up
    # forceAllBuilds = False,
    # pingBuilder = False,
    # stopBuild = False,
    # stopAllBuilds = False,
    # cancelPendingBuild = False,
# )
# c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

from buildbot.status import words
c['status'].append(words.IRC(host="irc.rathena.net", nick="BuildBot",
                             password="SET_PASSWORD_HERE",
                             channels=["#rathena-dev"],
                             notify_events={
                               'started': 1,
                               'finished': 1,
                               'success': 1,
                               'failure': 1,
                             },
                             allowForce=False
                             ))

from nightly import ShutdownIdleSlaves
c['status'].append(ShutdownIdleSlaves(
    slaves = [
        "slave7-Cygwin",
        "slave7-Windows-MinGW",
        "slave7-Windows-MSYS",
        "slave7-Windows-VS10",
        "slave7-Windows-VS10-x64"
    ]))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "rAthena"
c['titleURL'] = "http://rathena.org/board/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://build.rathena.org/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
