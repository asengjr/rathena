# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# the 'slaves' list defines the set of allowable buildslaves. Each element is
# a BuildSlave object, which is created with bot-name, bot-password.  These
# correspond to values given to the buildslave's mktap invocation.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("build1-CentOS", "SET_PASSWORD_HERE", max_builds=1),
               BuildSlave("build2-Ubuntu", "SET_PASSWORD_HERE", max_builds=1),
               BuildSlave("build3-Fedora", "SET_PASSWORD_HERE", max_builds=1),
               BuildSlave("build4-Ubuntu-x64", "SET_PASSWORD_HERE", max_builds=1),
               BuildSlave("build6-Debian", "SET_PASSWORD_HERE", max_builds=1)
              ]

# to limit to two concurrent builds on a slave, use
#  c['slaves'] = [BuildSlave("bot1name", "bot1passwd", max_builds=2)]


# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.

from buildbot.changes.svnpoller import SVNPoller
source_code_svn_url='https://rathena.svn.sourceforge.net/svnroot/rathena/trunk/'
svn_poller = SVNPoller(
                   svnurl=source_code_svn_url,
                   pollinterval=60, # seconds
                   histmax=10,
                   svnbin='/usr/bin/svn',
                   revlinktmpl='http://sourceforge.net/apps/trac/rathena/changeset/%s/',
)
c['change_source'] = [ svn_poller ]

# For example, if you had CVSToys installed on your repository, and your
# CVSROOT/freshcfg file had an entry like this:
#pb = ConfigurationSet([
#    (None, None, None, PBService(userpass=('foo', 'bar'), port=4519)),
#    ])

# then you could use the following buildmaster Change Source to subscribe to
# the FreshCVS daemon and be notified on every commit:
#
#from buildbot.changes.freshcvs import FreshCVSSource
#fc_source = FreshCVSSource("cvs.example.com", 4519, "foo", "bar")
#c['change_source'] = fc_source

# or, use a PBChangeSource, and then have your repository's commit script run
# 'buildbot sendchange', or use contrib/svn_buildbot.py, or
# contrib/arch_buildbot.py :
#
#from buildbot.changes.pb import PBChangeSource
#c['change_source'] = PBChangeSource()

# If you wat to use SVNPoller, it might look something like
#  # Where to get source code changes
# from buildbot.changes.svnpoller import SVNPoller
# source_code_svn_url='https://svn.myproject.org/bluejay/trunk'
# svn_poller = SVNPoller(
#                    svnurl=source_code_svn_url,
#                    pollinterval=60*60, # seconds
#                    histmax=10,
#                    svnbin='/usr/bin/svn',
## )
# c['sources'] = [ svn_poller ]

####### SCHEDULERS

## configure the Schedulers

def has_src_files(change):
    for name in change.files:
        if name.endswith(".c"):
            return True
        elif name.endswith(".h"):
            return True
    return False

from buildbot import scheduler
linux_compile = scheduler.Scheduler(name="rathena-sql", branch=None,
                                    treeStableTimer=2*60,
                                    builderNames=["CentOS", "Debian", "Ubuntu", 
                                                  "Ubuntu_x64"],
                                    fileIsImportant=has_src_files
                                    )
linux_tests = scheduler.Triggerable(name="rathena-tests",
                                    builderNames=["map-server_sql"]
                                    )
c['schedulers'] = [linux_compile, linux_tests]


####### BUILDERS

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this builder
#  slavename (required): which slave to use (must appear in c['bots'])
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/steps/source.py for
# CVS, SVN, and others.

from buildbot.steps import source, shell, trigger
from buildbot.steps.transfer import FileDownload
from buildbot.process import factory
from buildbot.process.properties import WithProperties

# Builders (compile and check for errors/warnings)
f2 = factory.BuildFactory()
f2.addStep(source.SVN(mode='copy',
                    svnurl='https://rathena.svn.sourceforge.net/svnroot/rathena/trunk/'))
f2.addStep(shell.Configure(command=["./configure", "--enable-buildbot=yes"], logEnviron=False))
f2.addStep(shell.Compile(command=["make", "sql"], logEnviron=False))
f2.addStep(trigger.Trigger(schedulerNames=["rathena-tests"]))
b1 = {'name': "CentOS",
      'slavenames': ["build1-CentOS"],
      'builddir': "centos",
      'slavebuilddir': "rathena_sql",
      'factory': f2,
      }
b6 = {'name': "Debian",
      'slavenames': ["build6-Debian"],
      'builddir': "debian",
      'slavebuilddir': "rathena_sql",
      'factory': f2,
      }
b2 = {'name': "Ubuntu",
      'slavenames': ["build2-Ubuntu"],
      'builddir': "ubuntu",
      'slavebuilddir': "rathena_sql",
      'factory': f2,
      }

# Builders x64
f4 = factory.BuildFactory()
f4.addStep(source.SVN(mode='copy',
                    svnurl='https://rathena.svn.sourceforge.net/svnroot/rathena/trunk/'))
f4.addStep(shell.Configure(command=["./configure", "--enable-buildbot=yes", "--enable-64bit"], logEnviron=False))
f4.addStep(shell.Compile(command=["make", "sql"], logEnviron=False))
b4 = {'name': "Ubuntu_x64",
      'slavenames': ["build4-Ubuntu-x64"],
      'builddir': "ubuntu_x64",
      'slavebuilddir': "rathena_x64_sql",
      'factory': f4,
      }

# Tests (start map-server_sql and check for errors/warnings)
f0 = factory.BuildFactory()
f0.addStep(FileDownload(mastersrc="~/import/map_conf.txt",   slavedest="conf/import/map_conf.txt"))
f0.addStep(FileDownload(mastersrc="~/import/inter_conf.txt", slavedest="conf/import/inter_conf.txt"))
f0.addStep(shell.ShellCommand(command=["./map-server_sql", "--run-once"], 
                              logEnviron=False,
                              description=["testing"],
                              descriptionDone=["tests"]
                              ))
b0 = {'name': "map-server_sql",
      'slavenames': ["build2-Ubuntu"],
      'builddir': "map-server_sql",
      'slavebuilddir': "rathena_sql",
      'factory': f0,
      }

c['builders'] = [b0, b1,b6,b2,  # Linux
                 b4             # Linux x64
                    # Windows
                 ]


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

# Use allowForce=True (boolean, not a string. ie: not 'True') to allow
# Forcing Builds in the Web User Interface. The default is False.
# from buildbot.status import html
# c['status'].append(html.WebStatus(http_port=8010,allowForce=True))

from buildbot.status import html
c['status'].append(html.WebStatus(http_port=80))

# from buildbot.status.web import auth, authz
# authz_cfg=authz.Authz(
    # # change any of these to True to enable; see the manual for more
    # # options
    # gracefulShutdown = False,
    # forceBuild = True,
    # forceAllBuilds = False,
    # pingBuilder = False,
    # stopBuild = False,
    # stopAllBuilds = False,
    # cancelPendingBuild = False,
# )
# c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

from buildbot.status import words
c['status'].append(words.IRC(host="irc.rizon.net", nick="BuildBot",
                             password="SET_PASSWORD_HERE",
                             channels=["#rathena"],
                             notify_events={
                               'started': 1,
                               'finished': 1,
                               'success': 1,
                               'failure': 1,
                             },
                             allowForce=False
                             ))

# from buildbot.status import mail
# c['status'].append(mail.MailNotifier(fromaddr="buildbot@localhost",
#                                      extraRecipients=["builds@example.com"],
#                                      sendToInterestedUsers=False))
#
# from buildbot.status import words
# c['status'].append(words.IRC(host="irc.example.com", nick="bb",
#                              channels=["#example"]))
#
# from buildbot.status import client
# c['status'].append(client.PBListener(9988))


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually committing changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "rAthena"
c['projectURL'] = "http://build.rathena.org/waterfall?reload=300&num_events=100"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://build.rathena.org/"
